//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZpdWebClient.ZPDService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthPacket", Namespace="http://schemas.datacontract.org/2004/07/ZpdContract")]
    [System.SerializableAttribute()]
    public partial class AuthPacket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthTolkenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ZpdWebClient.ZPDService.AuthTolkenTimeout TimeoutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthTolken {
            get {
                return this.AuthTolkenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthTolkenField, value) != true)) {
                    this.AuthTolkenField = value;
                    this.RaisePropertyChanged("AuthTolken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Offset {
            get {
                return this.OffsetField;
            }
            set {
                if ((this.OffsetField.Equals(value) != true)) {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZpdWebClient.ZPDService.AuthTolkenTimeout Timeout {
            get {
                return this.TimeoutField;
            }
            set {
                if ((this.TimeoutField.Equals(value) != true)) {
                    this.TimeoutField = value;
                    this.RaisePropertyChanged("Timeout");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthTolkenTimeout", Namespace="http://schemas.datacontract.org/2004/07/zpd")]
    public enum AuthTolkenTimeout : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unset = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Any = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FiveSeconds = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TenSecionds = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ThirtySeconds = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SixtySeconds = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoAuth = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZpdTrack", Namespace="http://schemas.datacontract.org/2004/07/zpd")]
    [System.SerializableAttribute()]
    public partial class ZpdTrack : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MediaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MediaTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QueueIndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediaId {
            get {
                return this.MediaIdField;
            }
            set {
                if ((this.MediaIdField.Equals(value) != true)) {
                    this.MediaIdField = value;
                    this.RaisePropertyChanged("MediaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediaTypeId {
            get {
                return this.MediaTypeIdField;
            }
            set {
                if ((this.MediaTypeIdField.Equals(value) != true)) {
                    this.MediaTypeIdField = value;
                    this.RaisePropertyChanged("MediaTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueueIndex {
            get {
                return this.QueueIndexField;
            }
            set {
                if ((this.QueueIndexField.Equals(value) != true)) {
                    this.QueueIndexField = value;
                    this.RaisePropertyChanged("QueueIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZpdCurrentPlayerState", Namespace="http://schemas.datacontract.org/2004/07/zpd")]
    [System.SerializableAttribute()]
    public partial class ZpdCurrentPlayerState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ZpdWebClient.ZPDService.ZpdTrack CurrentTrackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float CurrentTrackPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPlayingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float VolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZpdWebClient.ZPDService.ZpdTrack CurrentTrack {
            get {
                return this.CurrentTrackField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentTrackField, value) != true)) {
                    this.CurrentTrackField = value;
                    this.RaisePropertyChanged("CurrentTrack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float CurrentTrackPosition {
            get {
                return this.CurrentTrackPositionField;
            }
            set {
                if ((this.CurrentTrackPositionField.Equals(value) != true)) {
                    this.CurrentTrackPositionField = value;
                    this.RaisePropertyChanged("CurrentTrackPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPlaying {
            get {
                return this.IsPlayingField;
            }
            set {
                if ((this.IsPlayingField.Equals(value) != true)) {
                    this.IsPlayingField = value;
                    this.RaisePropertyChanged("IsPlaying");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://zpd", ConfigurationName="ZPDService.IZPDService")]
    public interface IZPDService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/GetNewClientId", ReplyAction="http://zpd/IZPDService/GetNewClientIdResponse")]
        int GetNewClientId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/Play", ReplyAction="http://zpd/IZPDService/PlayResponse")]
        void Play(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/PlaySongIndex", ReplyAction="http://zpd/IZPDService/PlaySongIndexResponse")]
        void PlaySongIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/Pause", ReplyAction="http://zpd/IZPDService/PauseResponse")]
        void Pause(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/Stop", ReplyAction="http://zpd/IZPDService/StopResponse")]
        void Stop(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/NextTrack", ReplyAction="http://zpd/IZPDService/NextTrackResponse")]
        void NextTrack(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/PreviousTrack", ReplyAction="http://zpd/IZPDService/PreviousTrackResponse")]
        void PreviousTrack(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ToggleFastForward", ReplyAction="http://zpd/IZPDService/ToggleFastForwardResponse")]
        void ToggleFastForward(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ToggleRewind", ReplyAction="http://zpd/IZPDService/ToggleRewindResponse")]
        void ToggleRewind(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ToggleShuffle", ReplyAction="http://zpd/IZPDService/ToggleShuffleResponse")]
        void ToggleShuffle(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ToggleRepeat", ReplyAction="http://zpd/IZPDService/ToggleRepeatResponse")]
        void ToggleRepeat(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ReIndexLibrary", ReplyAction="http://zpd/IZPDService/ReIndexLibraryResponse")]
        void ReIndexLibrary(ZpdWebClient.ZPDService.AuthPacket authPacket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/Search", ReplyAction="http://zpd/IZPDService/SearchResponse")]
        ZpdWebClient.ZPDService.ZpdTrack[] Search(string searchTerm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/QueueTrack", ReplyAction="http://zpd/IZPDService/QueueTrackResponse")]
        void QueueTrack(int mediaId, int mediaTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/QueueTrackAtIndex", ReplyAction="http://zpd/IZPDService/QueueTrackAtIndexResponse")]
        void QueueTrackAtIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int mediaId, int mediaTypeId, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/RemoveTrackAtIndex", ReplyAction="http://zpd/IZPDService/RemoveTrackAtIndexResponse")]
        void RemoveTrackAtIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/MoveSongAtIndexToNewIndex", ReplyAction="http://zpd/IZPDService/MoveSongAtIndexToNewIndexResponse")]
        void MoveSongAtIndexToNewIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int startIndex, int mediaId, int mediaTypeId, int destinationIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/GetCurrentPlayerState", ReplyAction="http://zpd/IZPDService/GetCurrentPlayerStateResponse")]
        ZpdWebClient.ZPDService.ZpdCurrentPlayerState GetCurrentPlayerState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/GetCurrentQueue", ReplyAction="http://zpd/IZPDService/GetCurrentQueueResponse")]
        ZpdWebClient.ZPDService.ZpdTrack[] GetCurrentQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://zpd/IZPDService/ClosePlayer", ReplyAction="http://zpd/IZPDService/ClosePlayerResponse")]
        void ClosePlayer(ZpdWebClient.ZPDService.AuthPacket authPacket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IZPDServiceChannel : ZpdWebClient.ZPDService.IZPDService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ZPDServiceClient : System.ServiceModel.ClientBase<ZpdWebClient.ZPDService.IZPDService>, ZpdWebClient.ZPDService.IZPDService {
        
        public ZPDServiceClient() {
        }
        
        public ZPDServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ZPDServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZPDServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZPDServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetNewClientId() {
            return base.Channel.GetNewClientId();
        }
        
        public void Play(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.Play(authPacket);
        }
        
        public void PlaySongIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int index) {
            base.Channel.PlaySongIndex(authPacket, index);
        }
        
        public void Pause(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.Pause(authPacket);
        }
        
        public void Stop(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.Stop(authPacket);
        }
        
        public void NextTrack(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.NextTrack(authPacket);
        }
        
        public void PreviousTrack(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.PreviousTrack(authPacket);
        }
        
        public void ToggleFastForward(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ToggleFastForward(authPacket);
        }
        
        public void ToggleRewind(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ToggleRewind(authPacket);
        }
        
        public void ToggleShuffle(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ToggleShuffle(authPacket);
        }
        
        public void ToggleRepeat(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ToggleRepeat(authPacket);
        }
        
        public void ReIndexLibrary(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ReIndexLibrary(authPacket);
        }
        
        public ZpdWebClient.ZPDService.ZpdTrack[] Search(string searchTerm) {
            return base.Channel.Search(searchTerm);
        }
        
        public void QueueTrack(int mediaId, int mediaTypeId) {
            base.Channel.QueueTrack(mediaId, mediaTypeId);
        }
        
        public void QueueTrackAtIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int mediaId, int mediaTypeId, int index) {
            base.Channel.QueueTrackAtIndex(authPacket, mediaId, mediaTypeId, index);
        }
        
        public void RemoveTrackAtIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int index) {
            base.Channel.RemoveTrackAtIndex(authPacket, index);
        }
        
        public void MoveSongAtIndexToNewIndex(ZpdWebClient.ZPDService.AuthPacket authPacket, int startIndex, int mediaId, int mediaTypeId, int destinationIndex) {
            base.Channel.MoveSongAtIndexToNewIndex(authPacket, startIndex, mediaId, mediaTypeId, destinationIndex);
        }
        
        public ZpdWebClient.ZPDService.ZpdCurrentPlayerState GetCurrentPlayerState() {
            return base.Channel.GetCurrentPlayerState();
        }
        
        public ZpdWebClient.ZPDService.ZpdTrack[] GetCurrentQueue() {
            return base.Channel.GetCurrentQueue();
        }
        
        public void ClosePlayer(ZpdWebClient.ZPDService.AuthPacket authPacket) {
            base.Channel.ClosePlayer(authPacket);
        }
    }
}
